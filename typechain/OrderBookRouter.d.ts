/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface OrderBookRouterInterface extends ethers.utils.Interface {
  functions: {
    "buyWithEth(uint256,address,address,uint256)": FunctionFragment;
    "buyWithToken(uint256,uint256,address,address,address,uint256)": FunctionFragment;
    "config()": FunctionFragment;
    "getAmountsForBuy(uint256,uint256,address,address)": FunctionFragment;
    "getAmountsForSell(uint256,uint256,address,address)": FunctionFragment;
    "getOrderBook(address,address,uint32)": FunctionFragment;
    "sellEth(uint256,address,address,uint256)": FunctionFragment;
    "sellToken(uint256,uint256,address,address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "buyWithEth",
    values: [BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyWithToken",
    values: [BigNumberish, BigNumberish, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "config", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAmountsForBuy",
    values: [BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsForSell",
    values: [BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderBook",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellEth",
    values: [BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellToken",
    values: [BigNumberish, BigNumberish, string, string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "buyWithEth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyWithToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "config", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsForBuy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsForSell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderBook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellEth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sellToken", data: BytesLike): Result;

  events: {};
}

export class OrderBookRouter extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: OrderBookRouterInterface;

  functions: {
    buyWithEth(
      price: BigNumberish,
      baseToken: string,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "buyWithEth(uint256,address,address,uint256)"(
      price: BigNumberish,
      baseToken: string,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    buyWithToken(
      amountOffer: BigNumberish,
      price: BigNumberish,
      baseToken: string,
      quoteToken: string,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "buyWithToken(uint256,uint256,address,address,address,uint256)"(
      amountOffer: BigNumberish,
      price: BigNumberish,
      baseToken: string,
      quoteToken: string,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    config(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "config()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getAmountsForBuy(
      amountOffer: BigNumberish,
      price: BigNumberish,
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<{
      amounts: BigNumber[];
      0: BigNumber[];
    }>;

    "getAmountsForBuy(uint256,uint256,address,address)"(
      amountOffer: BigNumberish,
      price: BigNumberish,
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<{
      amounts: BigNumber[];
      0: BigNumber[];
    }>;

    getAmountsForSell(
      amountOffer: BigNumberish,
      price: BigNumberish,
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<{
      amounts: BigNumber[];
      0: BigNumber[];
    }>;

    "getAmountsForSell(uint256,uint256,address,address)"(
      amountOffer: BigNumberish,
      price: BigNumberish,
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<{
      amounts: BigNumber[];
      0: BigNumber[];
    }>;

    getOrderBook(
      tokenA: string,
      tokenB: string,
      limitSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      price: BigNumber;
      buyPrices: BigNumber[];
      buyAmounts: BigNumber[];
      sellPrices: BigNumber[];
      sellAmounts: BigNumber[];
      0: BigNumber;
      1: BigNumber[];
      2: BigNumber[];
      3: BigNumber[];
      4: BigNumber[];
    }>;

    "getOrderBook(address,address,uint32)"(
      tokenA: string,
      tokenB: string,
      limitSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      price: BigNumber;
      buyPrices: BigNumber[];
      buyAmounts: BigNumber[];
      sellPrices: BigNumber[];
      sellAmounts: BigNumber[];
      0: BigNumber;
      1: BigNumber[];
      2: BigNumber[];
      3: BigNumber[];
      4: BigNumber[];
    }>;

    sellEth(
      price: BigNumberish,
      quoteToken: string,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "sellEth(uint256,address,address,uint256)"(
      price: BigNumberish,
      quoteToken: string,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    sellToken(
      amountOffer: BigNumberish,
      price: BigNumberish,
      baseToken: string,
      quoteToken: string,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "sellToken(uint256,uint256,address,address,address,uint256)"(
      amountOffer: BigNumberish,
      price: BigNumberish,
      baseToken: string,
      quoteToken: string,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  buyWithEth(
    price: BigNumberish,
    baseToken: string,
    to: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "buyWithEth(uint256,address,address,uint256)"(
    price: BigNumberish,
    baseToken: string,
    to: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  buyWithToken(
    amountOffer: BigNumberish,
    price: BigNumberish,
    baseToken: string,
    quoteToken: string,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "buyWithToken(uint256,uint256,address,address,address,uint256)"(
    amountOffer: BigNumberish,
    price: BigNumberish,
    baseToken: string,
    quoteToken: string,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  config(overrides?: CallOverrides): Promise<string>;

  "config()"(overrides?: CallOverrides): Promise<string>;

  getAmountsForBuy(
    amountOffer: BigNumberish,
    price: BigNumberish,
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getAmountsForBuy(uint256,uint256,address,address)"(
    amountOffer: BigNumberish,
    price: BigNumberish,
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getAmountsForSell(
    amountOffer: BigNumberish,
    price: BigNumberish,
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getAmountsForSell(uint256,uint256,address,address)"(
    amountOffer: BigNumberish,
    price: BigNumberish,
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getOrderBook(
    tokenA: string,
    tokenB: string,
    limitSize: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    price: BigNumber;
    buyPrices: BigNumber[];
    buyAmounts: BigNumber[];
    sellPrices: BigNumber[];
    sellAmounts: BigNumber[];
    0: BigNumber;
    1: BigNumber[];
    2: BigNumber[];
    3: BigNumber[];
    4: BigNumber[];
  }>;

  "getOrderBook(address,address,uint32)"(
    tokenA: string,
    tokenB: string,
    limitSize: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    price: BigNumber;
    buyPrices: BigNumber[];
    buyAmounts: BigNumber[];
    sellPrices: BigNumber[];
    sellAmounts: BigNumber[];
    0: BigNumber;
    1: BigNumber[];
    2: BigNumber[];
    3: BigNumber[];
    4: BigNumber[];
  }>;

  sellEth(
    price: BigNumberish,
    quoteToken: string,
    to: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "sellEth(uint256,address,address,uint256)"(
    price: BigNumberish,
    quoteToken: string,
    to: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  sellToken(
    amountOffer: BigNumberish,
    price: BigNumberish,
    baseToken: string,
    quoteToken: string,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "sellToken(uint256,uint256,address,address,address,uint256)"(
    amountOffer: BigNumberish,
    price: BigNumberish,
    baseToken: string,
    quoteToken: string,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    buyWithEth(
      price: BigNumberish,
      baseToken: string,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "buyWithEth(uint256,address,address,uint256)"(
      price: BigNumberish,
      baseToken: string,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyWithToken(
      amountOffer: BigNumberish,
      price: BigNumberish,
      baseToken: string,
      quoteToken: string,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "buyWithToken(uint256,uint256,address,address,address,uint256)"(
      amountOffer: BigNumberish,
      price: BigNumberish,
      baseToken: string,
      quoteToken: string,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    config(overrides?: CallOverrides): Promise<string>;

    "config()"(overrides?: CallOverrides): Promise<string>;

    getAmountsForBuy(
      amountOffer: BigNumberish,
      price: BigNumberish,
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getAmountsForBuy(uint256,uint256,address,address)"(
      amountOffer: BigNumberish,
      price: BigNumberish,
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getAmountsForSell(
      amountOffer: BigNumberish,
      price: BigNumberish,
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getAmountsForSell(uint256,uint256,address,address)"(
      amountOffer: BigNumberish,
      price: BigNumberish,
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getOrderBook(
      tokenA: string,
      tokenB: string,
      limitSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      price: BigNumber;
      buyPrices: BigNumber[];
      buyAmounts: BigNumber[];
      sellPrices: BigNumber[];
      sellAmounts: BigNumber[];
      0: BigNumber;
      1: BigNumber[];
      2: BigNumber[];
      3: BigNumber[];
      4: BigNumber[];
    }>;

    "getOrderBook(address,address,uint32)"(
      tokenA: string,
      tokenB: string,
      limitSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      price: BigNumber;
      buyPrices: BigNumber[];
      buyAmounts: BigNumber[];
      sellPrices: BigNumber[];
      sellAmounts: BigNumber[];
      0: BigNumber;
      1: BigNumber[];
      2: BigNumber[];
      3: BigNumber[];
      4: BigNumber[];
    }>;

    sellEth(
      price: BigNumberish,
      quoteToken: string,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sellEth(uint256,address,address,uint256)"(
      price: BigNumberish,
      quoteToken: string,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellToken(
      amountOffer: BigNumberish,
      price: BigNumberish,
      baseToken: string,
      quoteToken: string,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sellToken(uint256,uint256,address,address,address,uint256)"(
      amountOffer: BigNumberish,
      price: BigNumberish,
      baseToken: string,
      quoteToken: string,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    buyWithEth(
      price: BigNumberish,
      baseToken: string,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "buyWithEth(uint256,address,address,uint256)"(
      price: BigNumberish,
      baseToken: string,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    buyWithToken(
      amountOffer: BigNumberish,
      price: BigNumberish,
      baseToken: string,
      quoteToken: string,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "buyWithToken(uint256,uint256,address,address,address,uint256)"(
      amountOffer: BigNumberish,
      price: BigNumberish,
      baseToken: string,
      quoteToken: string,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    config(overrides?: CallOverrides): Promise<BigNumber>;

    "config()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAmountsForBuy(
      amountOffer: BigNumberish,
      price: BigNumberish,
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountsForBuy(uint256,uint256,address,address)"(
      amountOffer: BigNumberish,
      price: BigNumberish,
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsForSell(
      amountOffer: BigNumberish,
      price: BigNumberish,
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountsForSell(uint256,uint256,address,address)"(
      amountOffer: BigNumberish,
      price: BigNumberish,
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderBook(
      tokenA: string,
      tokenB: string,
      limitSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOrderBook(address,address,uint32)"(
      tokenA: string,
      tokenB: string,
      limitSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellEth(
      price: BigNumberish,
      quoteToken: string,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "sellEth(uint256,address,address,uint256)"(
      price: BigNumberish,
      quoteToken: string,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    sellToken(
      amountOffer: BigNumberish,
      price: BigNumberish,
      baseToken: string,
      quoteToken: string,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "sellToken(uint256,uint256,address,address,address,uint256)"(
      amountOffer: BigNumberish,
      price: BigNumberish,
      baseToken: string,
      quoteToken: string,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyWithEth(
      price: BigNumberish,
      baseToken: string,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "buyWithEth(uint256,address,address,uint256)"(
      price: BigNumberish,
      baseToken: string,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    buyWithToken(
      amountOffer: BigNumberish,
      price: BigNumberish,
      baseToken: string,
      quoteToken: string,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "buyWithToken(uint256,uint256,address,address,address,uint256)"(
      amountOffer: BigNumberish,
      price: BigNumberish,
      baseToken: string,
      quoteToken: string,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    config(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "config()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAmountsForBuy(
      amountOffer: BigNumberish,
      price: BigNumberish,
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAmountsForBuy(uint256,uint256,address,address)"(
      amountOffer: BigNumberish,
      price: BigNumberish,
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountsForSell(
      amountOffer: BigNumberish,
      price: BigNumberish,
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAmountsForSell(uint256,uint256,address,address)"(
      amountOffer: BigNumberish,
      price: BigNumberish,
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrderBook(
      tokenA: string,
      tokenB: string,
      limitSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOrderBook(address,address,uint32)"(
      tokenA: string,
      tokenB: string,
      limitSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sellEth(
      price: BigNumberish,
      quoteToken: string,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "sellEth(uint256,address,address,uint256)"(
      price: BigNumberish,
      quoteToken: string,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    sellToken(
      amountOffer: BigNumberish,
      price: BigNumberish,
      baseToken: string,
      quoteToken: string,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "sellToken(uint256,uint256,address,address,address,uint256)"(
      amountOffer: BigNumberish,
      price: BigNumberish,
      baseToken: string,
      quoteToken: string,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
