/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface OrderBookInterface extends ethers.utils.Interface {
  functions: {
    "baseBalance()": FunctionFragment;
    "baseDecimal()": FunctionFragment;
    "baseToken()": FunctionFragment;
    "cancelLimitOrder(address,uint256,uint256)": FunctionFragment;
    "config()": FunctionFragment;
    "createBuyLimitOrder(address,uint256,address)": FunctionFragment;
    "createSellLimitOrder(address,uint256,address)": FunctionFragment;
    "getFeeRate()": FunctionFragment;
    "getPrice()": FunctionFragment;
    "getReserves()": FunctionFragment;
    "initialize(address,address,address,address,address)": FunctionFragment;
    "marketBook(uint256,uint32)": FunctionFragment;
    "nextBook(uint256,uint256)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "orderBookFactory()": FunctionFragment;
    "orderNFT()": FunctionFragment;
    "pair()": FunctionFragment;
    "priceDecimal()": FunctionFragment;
    "priceStep(uint256)": FunctionFragment;
    "quoteBalance()": FunctionFragment;
    "quoteToken()": FunctionFragment;
    "rangeBook(uint256,uint256)": FunctionFragment;
    "reverse()": FunctionFragment;
    "safeRefund(address,address)": FunctionFragment;
    "takeOrderWhenMovePrice(address,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "baseBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseDecimal",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "baseToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cancelLimitOrder",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "config", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createBuyLimitOrder",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createSellLimitOrder",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "marketBook",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextBook",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "orderBookFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "orderNFT", values?: undefined): string;
  encodeFunctionData(functionFragment: "pair", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceDecimal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceStep",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quoteToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rangeBook",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "reverse", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "safeRefund",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "takeOrderWhenMovePrice",
    values: [string, BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "baseBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseDecimal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "config", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createBuyLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSellLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFeeRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "marketBook", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextBook", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orderBookFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orderNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceDecimal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "priceStep", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quoteToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rangeBook", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reverse", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safeRefund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "takeOrderWhenMovePrice",
    data: BytesLike
  ): Result;

  events: {};
}

export class OrderBook extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: OrderBookInterface;

  functions: {
    baseBalance(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "baseBalance()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    baseDecimal(overrides?: CallOverrides): Promise<{
      decimal: BigNumber;
      0: BigNumber;
    }>;

    "baseDecimal()"(overrides?: CallOverrides): Promise<{
      decimal: BigNumber;
      0: BigNumber;
    }>;

    baseToken(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "baseToken()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    cancelLimitOrder(
      to: string,
      orderId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelLimitOrder(address,uint256,uint256)"(
      to: string,
      orderId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    config(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "config()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    createBuyLimitOrder(
      user: string,
      price: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createBuyLimitOrder(address,uint256,address)"(
      user: string,
      price: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createSellLimitOrder(
      user: string,
      price: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createSellLimitOrder(address,uint256,address)"(
      user: string,
      price: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getFeeRate(overrides?: CallOverrides): Promise<{
      protocolFeeRate: BigNumber;
      subsidyFeeRate: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "getFeeRate()"(overrides?: CallOverrides): Promise<{
      protocolFeeRate: BigNumber;
      subsidyFeeRate: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    getPrice(overrides?: CallOverrides): Promise<{
      price: BigNumber;
      0: BigNumber;
    }>;

    "getPrice()"(overrides?: CallOverrides): Promise<{
      price: BigNumber;
      0: BigNumber;
    }>;

    getReserves(overrides?: CallOverrides): Promise<{
      reserveBase: BigNumber;
      reserveQuote: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "getReserves()"(overrides?: CallOverrides): Promise<{
      reserveBase: BigNumber;
      reserveQuote: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    initialize(
      _pair: string,
      _baseToken: string,
      _quoteToken: string,
      _orderNFT: string,
      _config: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,address,address,address)"(
      _pair: string,
      _baseToken: string,
      _quoteToken: string,
      _orderNFT: string,
      _config: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    marketBook(
      direction: BigNumberish,
      maxSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      prices: BigNumber[];
      amounts: BigNumber[];
      0: BigNumber[];
      1: BigNumber[];
    }>;

    "marketBook(uint256,uint32)"(
      direction: BigNumberish,
      maxSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      prices: BigNumber[];
      amounts: BigNumber[];
      0: BigNumber[];
      1: BigNumber[];
    }>;

    nextBook(
      direction: BigNumberish,
      cur: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      next: BigNumber;
      amount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "nextBook(uint256,uint256)"(
      direction: BigNumberish,
      cur: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      next: BigNumber;
      amount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    onERC721Received(
      arg0: string,
      to: string,
      tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      to: string,
      tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    orderBookFactory(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "orderBookFactory()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    orderNFT(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "orderNFT()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    pair(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "pair()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    priceDecimal(overrides?: CallOverrides): Promise<{
      decimal: BigNumber;
      0: BigNumber;
    }>;

    "priceDecimal()"(overrides?: CallOverrides): Promise<{
      decimal: BigNumber;
      0: BigNumber;
    }>;

    priceStep(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      step: BigNumber;
      0: BigNumber;
    }>;

    "priceStep(uint256)"(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      step: BigNumber;
      0: BigNumber;
    }>;

    quoteBalance(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "quoteBalance()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    quoteToken(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "quoteToken()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    rangeBook(
      direction: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      prices: BigNumber[];
      amounts: BigNumber[];
      0: BigNumber[];
      1: BigNumber[];
    }>;

    "rangeBook(uint256,uint256)"(
      direction: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      prices: BigNumber[];
      amounts: BigNumber[];
      0: BigNumber[];
      1: BigNumber[];
    }>;

    reverse(overrides?: Overrides): Promise<ContractTransaction>;

    "reverse()"(overrides?: Overrides): Promise<ContractTransaction>;

    safeRefund(
      token: string,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeRefund(address,address)"(
      token: string,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    takeOrderWhenMovePrice(
      tokenIn: string,
      amountIn: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "takeOrderWhenMovePrice(address,uint256,address)"(
      tokenIn: string,
      amountIn: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  baseBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "baseBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  baseDecimal(overrides?: CallOverrides): Promise<BigNumber>;

  "baseDecimal()"(overrides?: CallOverrides): Promise<BigNumber>;

  baseToken(overrides?: CallOverrides): Promise<string>;

  "baseToken()"(overrides?: CallOverrides): Promise<string>;

  cancelLimitOrder(
    to: string,
    orderId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancelLimitOrder(address,uint256,uint256)"(
    to: string,
    orderId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  config(overrides?: CallOverrides): Promise<string>;

  "config()"(overrides?: CallOverrides): Promise<string>;

  createBuyLimitOrder(
    user: string,
    price: BigNumberish,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createBuyLimitOrder(address,uint256,address)"(
    user: string,
    price: BigNumberish,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createSellLimitOrder(
    user: string,
    price: BigNumberish,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createSellLimitOrder(address,uint256,address)"(
    user: string,
    price: BigNumberish,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getFeeRate(overrides?: CallOverrides): Promise<{
    protocolFeeRate: BigNumber;
    subsidyFeeRate: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "getFeeRate()"(overrides?: CallOverrides): Promise<{
    protocolFeeRate: BigNumber;
    subsidyFeeRate: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  getPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "getPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  getReserves(overrides?: CallOverrides): Promise<{
    reserveBase: BigNumber;
    reserveQuote: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "getReserves()"(overrides?: CallOverrides): Promise<{
    reserveBase: BigNumber;
    reserveQuote: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  initialize(
    _pair: string,
    _baseToken: string,
    _quoteToken: string,
    _orderNFT: string,
    _config: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,address,address,address)"(
    _pair: string,
    _baseToken: string,
    _quoteToken: string,
    _orderNFT: string,
    _config: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  marketBook(
    direction: BigNumberish,
    maxSize: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    prices: BigNumber[];
    amounts: BigNumber[];
    0: BigNumber[];
    1: BigNumber[];
  }>;

  "marketBook(uint256,uint32)"(
    direction: BigNumberish,
    maxSize: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    prices: BigNumber[];
    amounts: BigNumber[];
    0: BigNumber[];
    1: BigNumber[];
  }>;

  nextBook(
    direction: BigNumberish,
    cur: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    next: BigNumber;
    amount: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "nextBook(uint256,uint256)"(
    direction: BigNumberish,
    cur: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    next: BigNumber;
    amount: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  onERC721Received(
    arg0: string,
    to: string,
    tokenId: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onERC721Received(address,address,uint256,bytes)"(
    arg0: string,
    to: string,
    tokenId: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  orderBookFactory(overrides?: CallOverrides): Promise<string>;

  "orderBookFactory()"(overrides?: CallOverrides): Promise<string>;

  orderNFT(overrides?: CallOverrides): Promise<string>;

  "orderNFT()"(overrides?: CallOverrides): Promise<string>;

  pair(overrides?: CallOverrides): Promise<string>;

  "pair()"(overrides?: CallOverrides): Promise<string>;

  priceDecimal(overrides?: CallOverrides): Promise<BigNumber>;

  "priceDecimal()"(overrides?: CallOverrides): Promise<BigNumber>;

  priceStep(price: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "priceStep(uint256)"(
    price: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  quoteBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "quoteBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  quoteToken(overrides?: CallOverrides): Promise<string>;

  "quoteToken()"(overrides?: CallOverrides): Promise<string>;

  rangeBook(
    direction: BigNumberish,
    price: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    prices: BigNumber[];
    amounts: BigNumber[];
    0: BigNumber[];
    1: BigNumber[];
  }>;

  "rangeBook(uint256,uint256)"(
    direction: BigNumberish,
    price: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    prices: BigNumber[];
    amounts: BigNumber[];
    0: BigNumber[];
    1: BigNumber[];
  }>;

  reverse(overrides?: Overrides): Promise<ContractTransaction>;

  "reverse()"(overrides?: Overrides): Promise<ContractTransaction>;

  safeRefund(
    token: string,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeRefund(address,address)"(
    token: string,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  takeOrderWhenMovePrice(
    tokenIn: string,
    amountIn: BigNumberish,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "takeOrderWhenMovePrice(address,uint256,address)"(
    tokenIn: string,
    amountIn: BigNumberish,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    baseBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "baseBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    baseDecimal(overrides?: CallOverrides): Promise<BigNumber>;

    "baseDecimal()"(overrides?: CallOverrides): Promise<BigNumber>;

    baseToken(overrides?: CallOverrides): Promise<string>;

    "baseToken()"(overrides?: CallOverrides): Promise<string>;

    cancelLimitOrder(
      to: string,
      orderId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelLimitOrder(address,uint256,uint256)"(
      to: string,
      orderId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    config(overrides?: CallOverrides): Promise<string>;

    "config()"(overrides?: CallOverrides): Promise<string>;

    createBuyLimitOrder(
      user: string,
      price: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "createBuyLimitOrder(address,uint256,address)"(
      user: string,
      price: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createSellLimitOrder(
      user: string,
      price: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "createSellLimitOrder(address,uint256,address)"(
      user: string,
      price: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeRate(overrides?: CallOverrides): Promise<{
      protocolFeeRate: BigNumber;
      subsidyFeeRate: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "getFeeRate()"(overrides?: CallOverrides): Promise<{
      protocolFeeRate: BigNumber;
      subsidyFeeRate: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    getPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "getPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    getReserves(overrides?: CallOverrides): Promise<{
      reserveBase: BigNumber;
      reserveQuote: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "getReserves()"(overrides?: CallOverrides): Promise<{
      reserveBase: BigNumber;
      reserveQuote: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    initialize(
      _pair: string,
      _baseToken: string,
      _quoteToken: string,
      _orderNFT: string,
      _config: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address,address,address)"(
      _pair: string,
      _baseToken: string,
      _quoteToken: string,
      _orderNFT: string,
      _config: string,
      overrides?: CallOverrides
    ): Promise<void>;

    marketBook(
      direction: BigNumberish,
      maxSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      prices: BigNumber[];
      amounts: BigNumber[];
      0: BigNumber[];
      1: BigNumber[];
    }>;

    "marketBook(uint256,uint32)"(
      direction: BigNumberish,
      maxSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      prices: BigNumber[];
      amounts: BigNumber[];
      0: BigNumber[];
      1: BigNumber[];
    }>;

    nextBook(
      direction: BigNumberish,
      cur: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      next: BigNumber;
      amount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "nextBook(uint256,uint256)"(
      direction: BigNumberish,
      cur: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      next: BigNumber;
      amount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    onERC721Received(
      arg0: string,
      to: string,
      tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      to: string,
      tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    orderBookFactory(overrides?: CallOverrides): Promise<string>;

    "orderBookFactory()"(overrides?: CallOverrides): Promise<string>;

    orderNFT(overrides?: CallOverrides): Promise<string>;

    "orderNFT()"(overrides?: CallOverrides): Promise<string>;

    pair(overrides?: CallOverrides): Promise<string>;

    "pair()"(overrides?: CallOverrides): Promise<string>;

    priceDecimal(overrides?: CallOverrides): Promise<BigNumber>;

    "priceDecimal()"(overrides?: CallOverrides): Promise<BigNumber>;

    priceStep(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "priceStep(uint256)"(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "quoteBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    quoteToken(overrides?: CallOverrides): Promise<string>;

    "quoteToken()"(overrides?: CallOverrides): Promise<string>;

    rangeBook(
      direction: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      prices: BigNumber[];
      amounts: BigNumber[];
      0: BigNumber[];
      1: BigNumber[];
    }>;

    "rangeBook(uint256,uint256)"(
      direction: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      prices: BigNumber[];
      amounts: BigNumber[];
      0: BigNumber[];
      1: BigNumber[];
    }>;

    reverse(overrides?: CallOverrides): Promise<void>;

    "reverse()"(overrides?: CallOverrides): Promise<void>;

    safeRefund(
      token: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeRefund(address,address)"(
      token: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    takeOrderWhenMovePrice(
      tokenIn: string,
      amountIn: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<{
      amountOutLeft: BigNumber;
      accounts: string[];
      amounts: BigNumber[];
      0: BigNumber;
      1: string[];
      2: BigNumber[];
    }>;

    "takeOrderWhenMovePrice(address,uint256,address)"(
      tokenIn: string,
      amountIn: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<{
      amountOutLeft: BigNumber;
      accounts: string[];
      amounts: BigNumber[];
      0: BigNumber;
      1: string[];
      2: BigNumber[];
    }>;
  };

  filters: {};

  estimateGas: {
    baseBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "baseBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    baseDecimal(overrides?: CallOverrides): Promise<BigNumber>;

    "baseDecimal()"(overrides?: CallOverrides): Promise<BigNumber>;

    baseToken(overrides?: CallOverrides): Promise<BigNumber>;

    "baseToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    cancelLimitOrder(
      to: string,
      orderId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "cancelLimitOrder(address,uint256,uint256)"(
      to: string,
      orderId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    config(overrides?: CallOverrides): Promise<BigNumber>;

    "config()"(overrides?: CallOverrides): Promise<BigNumber>;

    createBuyLimitOrder(
      user: string,
      price: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createBuyLimitOrder(address,uint256,address)"(
      user: string,
      price: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createSellLimitOrder(
      user: string,
      price: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createSellLimitOrder(address,uint256,address)"(
      user: string,
      price: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

    "getFeeRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "getPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    getReserves(overrides?: CallOverrides): Promise<BigNumber>;

    "getReserves()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _pair: string,
      _baseToken: string,
      _quoteToken: string,
      _orderNFT: string,
      _config: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,address,address,address)"(
      _pair: string,
      _baseToken: string,
      _quoteToken: string,
      _orderNFT: string,
      _config: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    marketBook(
      direction: BigNumberish,
      maxSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "marketBook(uint256,uint32)"(
      direction: BigNumberish,
      maxSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextBook(
      direction: BigNumberish,
      cur: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nextBook(uint256,uint256)"(
      direction: BigNumberish,
      cur: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      to: string,
      tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      to: string,
      tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    orderBookFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "orderBookFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    orderNFT(overrides?: CallOverrides): Promise<BigNumber>;

    "orderNFT()"(overrides?: CallOverrides): Promise<BigNumber>;

    pair(overrides?: CallOverrides): Promise<BigNumber>;

    "pair()"(overrides?: CallOverrides): Promise<BigNumber>;

    priceDecimal(overrides?: CallOverrides): Promise<BigNumber>;

    "priceDecimal()"(overrides?: CallOverrides): Promise<BigNumber>;

    priceStep(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "priceStep(uint256)"(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "quoteBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    quoteToken(overrides?: CallOverrides): Promise<BigNumber>;

    "quoteToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    rangeBook(
      direction: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rangeBook(uint256,uint256)"(
      direction: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reverse(overrides?: Overrides): Promise<BigNumber>;

    "reverse()"(overrides?: Overrides): Promise<BigNumber>;

    safeRefund(
      token: string,
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeRefund(address,address)"(
      token: string,
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    takeOrderWhenMovePrice(
      tokenIn: string,
      amountIn: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "takeOrderWhenMovePrice(address,uint256,address)"(
      tokenIn: string,
      amountIn: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    baseBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "baseBalance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseDecimal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "baseDecimal()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "baseToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelLimitOrder(
      to: string,
      orderId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelLimitOrder(address,uint256,uint256)"(
      to: string,
      orderId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    config(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "config()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createBuyLimitOrder(
      user: string,
      price: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createBuyLimitOrder(address,uint256,address)"(
      user: string,
      price: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createSellLimitOrder(
      user: string,
      price: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createSellLimitOrder(address,uint256,address)"(
      user: string,
      price: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getFeeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getFeeRate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getReserves()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _pair: string,
      _baseToken: string,
      _quoteToken: string,
      _orderNFT: string,
      _config: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address,address,address)"(
      _pair: string,
      _baseToken: string,
      _quoteToken: string,
      _orderNFT: string,
      _config: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    marketBook(
      direction: BigNumberish,
      maxSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "marketBook(uint256,uint32)"(
      direction: BigNumberish,
      maxSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextBook(
      direction: BigNumberish,
      cur: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nextBook(uint256,uint256)"(
      direction: BigNumberish,
      cur: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      to: string,
      tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      to: string,
      tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    orderBookFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "orderBookFactory()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orderNFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "orderNFT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pair()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceDecimal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "priceDecimal()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceStep(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "priceStep(uint256)"(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "quoteBalance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quoteToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "quoteToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rangeBook(
      direction: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rangeBook(uint256,uint256)"(
      direction: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reverse(overrides?: Overrides): Promise<PopulatedTransaction>;

    "reverse()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    safeRefund(
      token: string,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeRefund(address,address)"(
      token: string,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    takeOrderWhenMovePrice(
      tokenIn: string,
      amountIn: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "takeOrderWhenMovePrice(address,uint256,address)"(
      tokenIn: string,
      amountIn: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
