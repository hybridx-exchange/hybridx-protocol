/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IOrderBookQueryInterface extends ethers.utils.Interface {
  functions: {
    "getAmountInForMovePrice(address,address,uint256)": FunctionFragment;
    "getAmountOutForMovePrice(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getAmountInForMovePrice",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountOutForMovePrice",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAmountInForMovePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountOutForMovePrice",
    data: BytesLike
  ): Result;

  events: {};
}

export class IOrderBookQuery extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IOrderBookQueryInterface;

  functions: {
    getAmountInForMovePrice(
      orderBook: string,
      tokenOut: string,
      amountOutOffer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountIn: BigNumber;
      extra: BigNumber[];
      0: BigNumber;
      1: BigNumber[];
    }>;

    "getAmountInForMovePrice(address,address,uint256)"(
      orderBook: string,
      tokenOut: string,
      amountOutOffer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountIn: BigNumber;
      extra: BigNumber[];
      0: BigNumber;
      1: BigNumber[];
    }>;

    getAmountOutForMovePrice(
      orderBook: string,
      tokenIn: string,
      amountInOffer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountOut: BigNumber;
      extra: BigNumber[];
      0: BigNumber;
      1: BigNumber[];
    }>;

    "getAmountOutForMovePrice(address,address,uint256)"(
      orderBook: string,
      tokenIn: string,
      amountInOffer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountOut: BigNumber;
      extra: BigNumber[];
      0: BigNumber;
      1: BigNumber[];
    }>;
  };

  getAmountInForMovePrice(
    orderBook: string,
    tokenOut: string,
    amountOutOffer: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    amountIn: BigNumber;
    extra: BigNumber[];
    0: BigNumber;
    1: BigNumber[];
  }>;

  "getAmountInForMovePrice(address,address,uint256)"(
    orderBook: string,
    tokenOut: string,
    amountOutOffer: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    amountIn: BigNumber;
    extra: BigNumber[];
    0: BigNumber;
    1: BigNumber[];
  }>;

  getAmountOutForMovePrice(
    orderBook: string,
    tokenIn: string,
    amountInOffer: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    amountOut: BigNumber;
    extra: BigNumber[];
    0: BigNumber;
    1: BigNumber[];
  }>;

  "getAmountOutForMovePrice(address,address,uint256)"(
    orderBook: string,
    tokenIn: string,
    amountInOffer: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    amountOut: BigNumber;
    extra: BigNumber[];
    0: BigNumber;
    1: BigNumber[];
  }>;

  callStatic: {
    getAmountInForMovePrice(
      orderBook: string,
      tokenOut: string,
      amountOutOffer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountIn: BigNumber;
      extra: BigNumber[];
      0: BigNumber;
      1: BigNumber[];
    }>;

    "getAmountInForMovePrice(address,address,uint256)"(
      orderBook: string,
      tokenOut: string,
      amountOutOffer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountIn: BigNumber;
      extra: BigNumber[];
      0: BigNumber;
      1: BigNumber[];
    }>;

    getAmountOutForMovePrice(
      orderBook: string,
      tokenIn: string,
      amountInOffer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountOut: BigNumber;
      extra: BigNumber[];
      0: BigNumber;
      1: BigNumber[];
    }>;

    "getAmountOutForMovePrice(address,address,uint256)"(
      orderBook: string,
      tokenIn: string,
      amountInOffer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountOut: BigNumber;
      extra: BigNumber[];
      0: BigNumber;
      1: BigNumber[];
    }>;
  };

  filters: {};

  estimateGas: {
    getAmountInForMovePrice(
      orderBook: string,
      tokenOut: string,
      amountOutOffer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountInForMovePrice(address,address,uint256)"(
      orderBook: string,
      tokenOut: string,
      amountOutOffer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountOutForMovePrice(
      orderBook: string,
      tokenIn: string,
      amountInOffer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountOutForMovePrice(address,address,uint256)"(
      orderBook: string,
      tokenIn: string,
      amountInOffer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAmountInForMovePrice(
      orderBook: string,
      tokenOut: string,
      amountOutOffer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAmountInForMovePrice(address,address,uint256)"(
      orderBook: string,
      tokenOut: string,
      amountOutOffer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountOutForMovePrice(
      orderBook: string,
      tokenIn: string,
      amountInOffer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAmountOutForMovePrice(address,address,uint256)"(
      orderBook: string,
      tokenIn: string,
      amountInOffer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
