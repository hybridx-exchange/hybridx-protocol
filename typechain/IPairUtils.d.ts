/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IPairUtilsInterface extends ethers.utils.Interface {
  functions: {
    "getAmountIn(uint256,uint256,uint256)": FunctionFragment;
    "getAmountOut(uint256,uint256,uint256)": FunctionFragment;
    "getAmountsIn(uint256,address[])": FunctionFragment;
    "getAmountsOut(uint256,address[])": FunctionFragment;
    "getBestAmountsIn(uint256,address[],uint256[])": FunctionFragment;
    "getBestAmountsOut(uint256,address[],uint256[])": FunctionFragment;
    "getReserves(address,address)": FunctionFragment;
    "quote(uint256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getAmountIn",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountOut",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsIn",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsOut",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getBestAmountsIn",
    values: [BigNumberish, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getBestAmountsOut",
    values: [BigNumberish, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserves",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "quote",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBestAmountsIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBestAmountsOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;

  events: {};
}

export class IPairUtils extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IPairUtilsInterface;

  functions: {
    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountIn: BigNumber;
      0: BigNumber;
    }>;

    "getAmountIn(uint256,uint256,uint256)"(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountIn: BigNumber;
      0: BigNumber;
    }>;

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountOut: BigNumber;
      0: BigNumber;
    }>;

    "getAmountOut(uint256,uint256,uint256)"(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountOut: BigNumber;
      0: BigNumber;
    }>;

    getAmountsIn(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<{
      amounts: BigNumber[];
      extra: BigNumber[];
      0: BigNumber[];
      1: BigNumber[];
    }>;

    "getAmountsIn(uint256,address[])"(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<{
      amounts: BigNumber[];
      extra: BigNumber[];
      0: BigNumber[];
      1: BigNumber[];
    }>;

    getAmountsOut(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<{
      amounts: BigNumber[];
      extra: BigNumber[];
      0: BigNumber[];
      1: BigNumber[];
    }>;

    "getAmountsOut(uint256,address[])"(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<{
      amounts: BigNumber[];
      extra: BigNumber[];
      0: BigNumber[];
      1: BigNumber[];
    }>;

    getBestAmountsIn(
      amountOut: BigNumberish,
      paths: string[],
      lens: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      path: string[];
      amounts: BigNumber[];
      extra: BigNumber[];
      0: string[];
      1: BigNumber[];
      2: BigNumber[];
    }>;

    "getBestAmountsIn(uint256,address[],uint256[])"(
      amountOut: BigNumberish,
      paths: string[],
      lens: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      path: string[];
      amounts: BigNumber[];
      extra: BigNumber[];
      0: string[];
      1: BigNumber[];
      2: BigNumber[];
    }>;

    getBestAmountsOut(
      amountIn: BigNumberish,
      paths: string[],
      lens: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      path: string[];
      amounts: BigNumber[];
      extra: BigNumber[];
      0: string[];
      1: BigNumber[];
      2: BigNumber[];
    }>;

    "getBestAmountsOut(uint256,address[],uint256[])"(
      amountIn: BigNumberish,
      paths: string[],
      lens: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      path: string[];
      amounts: BigNumber[];
      extra: BigNumber[];
      0: string[];
      1: BigNumber[];
      2: BigNumber[];
    }>;

    getReserves(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<{
      reserveA: BigNumber;
      reserveB: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "getReserves(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<{
      reserveA: BigNumber;
      reserveB: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    quote(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountB: BigNumber;
      0: BigNumber;
    }>;

    "quote(uint256,uint256,uint256)"(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountB: BigNumber;
      0: BigNumber;
    }>;
  };

  getAmountIn(
    amountOut: BigNumberish,
    reserveIn: BigNumberish,
    reserveOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getAmountIn(uint256,uint256,uint256)"(
    amountOut: BigNumberish,
    reserveIn: BigNumberish,
    reserveOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmountOut(
    amountIn: BigNumberish,
    reserveIn: BigNumberish,
    reserveOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getAmountOut(uint256,uint256,uint256)"(
    amountIn: BigNumberish,
    reserveIn: BigNumberish,
    reserveOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmountsIn(
    amountOut: BigNumberish,
    path: string[],
    overrides?: CallOverrides
  ): Promise<{
    amounts: BigNumber[];
    extra: BigNumber[];
    0: BigNumber[];
    1: BigNumber[];
  }>;

  "getAmountsIn(uint256,address[])"(
    amountOut: BigNumberish,
    path: string[],
    overrides?: CallOverrides
  ): Promise<{
    amounts: BigNumber[];
    extra: BigNumber[];
    0: BigNumber[];
    1: BigNumber[];
  }>;

  getAmountsOut(
    amountIn: BigNumberish,
    path: string[],
    overrides?: CallOverrides
  ): Promise<{
    amounts: BigNumber[];
    extra: BigNumber[];
    0: BigNumber[];
    1: BigNumber[];
  }>;

  "getAmountsOut(uint256,address[])"(
    amountIn: BigNumberish,
    path: string[],
    overrides?: CallOverrides
  ): Promise<{
    amounts: BigNumber[];
    extra: BigNumber[];
    0: BigNumber[];
    1: BigNumber[];
  }>;

  getBestAmountsIn(
    amountOut: BigNumberish,
    paths: string[],
    lens: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<{
    path: string[];
    amounts: BigNumber[];
    extra: BigNumber[];
    0: string[];
    1: BigNumber[];
    2: BigNumber[];
  }>;

  "getBestAmountsIn(uint256,address[],uint256[])"(
    amountOut: BigNumberish,
    paths: string[],
    lens: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<{
    path: string[];
    amounts: BigNumber[];
    extra: BigNumber[];
    0: string[];
    1: BigNumber[];
    2: BigNumber[];
  }>;

  getBestAmountsOut(
    amountIn: BigNumberish,
    paths: string[],
    lens: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<{
    path: string[];
    amounts: BigNumber[];
    extra: BigNumber[];
    0: string[];
    1: BigNumber[];
    2: BigNumber[];
  }>;

  "getBestAmountsOut(uint256,address[],uint256[])"(
    amountIn: BigNumberish,
    paths: string[],
    lens: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<{
    path: string[];
    amounts: BigNumber[];
    extra: BigNumber[];
    0: string[];
    1: BigNumber[];
    2: BigNumber[];
  }>;

  getReserves(
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<{
    reserveA: BigNumber;
    reserveB: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "getReserves(address,address)"(
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<{
    reserveA: BigNumber;
    reserveB: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  quote(
    amountA: BigNumberish,
    reserveA: BigNumberish,
    reserveB: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "quote(uint256,uint256,uint256)"(
    amountA: BigNumberish,
    reserveA: BigNumberish,
    reserveB: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountIn(uint256,uint256,uint256)"(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountOut(uint256,uint256,uint256)"(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsIn(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<{
      amounts: BigNumber[];
      extra: BigNumber[];
      0: BigNumber[];
      1: BigNumber[];
    }>;

    "getAmountsIn(uint256,address[])"(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<{
      amounts: BigNumber[];
      extra: BigNumber[];
      0: BigNumber[];
      1: BigNumber[];
    }>;

    getAmountsOut(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<{
      amounts: BigNumber[];
      extra: BigNumber[];
      0: BigNumber[];
      1: BigNumber[];
    }>;

    "getAmountsOut(uint256,address[])"(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<{
      amounts: BigNumber[];
      extra: BigNumber[];
      0: BigNumber[];
      1: BigNumber[];
    }>;

    getBestAmountsIn(
      amountOut: BigNumberish,
      paths: string[],
      lens: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      path: string[];
      amounts: BigNumber[];
      extra: BigNumber[];
      0: string[];
      1: BigNumber[];
      2: BigNumber[];
    }>;

    "getBestAmountsIn(uint256,address[],uint256[])"(
      amountOut: BigNumberish,
      paths: string[],
      lens: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      path: string[];
      amounts: BigNumber[];
      extra: BigNumber[];
      0: string[];
      1: BigNumber[];
      2: BigNumber[];
    }>;

    getBestAmountsOut(
      amountIn: BigNumberish,
      paths: string[],
      lens: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      path: string[];
      amounts: BigNumber[];
      extra: BigNumber[];
      0: string[];
      1: BigNumber[];
      2: BigNumber[];
    }>;

    "getBestAmountsOut(uint256,address[],uint256[])"(
      amountIn: BigNumberish,
      paths: string[],
      lens: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      path: string[];
      amounts: BigNumber[];
      extra: BigNumber[];
      0: string[];
      1: BigNumber[];
      2: BigNumber[];
    }>;

    getReserves(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<{
      reserveA: BigNumber;
      reserveB: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "getReserves(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<{
      reserveA: BigNumber;
      reserveB: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    quote(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "quote(uint256,uint256,uint256)"(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountIn(uint256,uint256,uint256)"(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountOut(uint256,uint256,uint256)"(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsIn(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountsIn(uint256,address[])"(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsOut(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountsOut(uint256,address[])"(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBestAmountsIn(
      amountOut: BigNumberish,
      paths: string[],
      lens: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBestAmountsIn(uint256,address[],uint256[])"(
      amountOut: BigNumberish,
      paths: string[],
      lens: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBestAmountsOut(
      amountIn: BigNumberish,
      paths: string[],
      lens: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBestAmountsOut(uint256,address[],uint256[])"(
      amountIn: BigNumberish,
      paths: string[],
      lens: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserves(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getReserves(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quote(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "quote(uint256,uint256,uint256)"(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAmountIn(uint256,uint256,uint256)"(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAmountOut(uint256,uint256,uint256)"(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountsIn(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAmountsIn(uint256,address[])"(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountsOut(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAmountsOut(uint256,address[])"(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBestAmountsIn(
      amountOut: BigNumberish,
      paths: string[],
      lens: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBestAmountsIn(uint256,address[],uint256[])"(
      amountOut: BigNumberish,
      paths: string[],
      lens: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBestAmountsOut(
      amountIn: BigNumberish,
      paths: string[],
      lens: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBestAmountsOut(uint256,address[],uint256[])"(
      amountIn: BigNumberish,
      paths: string[],
      lens: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserves(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getReserves(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quote(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "quote(uint256,uint256,uint256)"(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
