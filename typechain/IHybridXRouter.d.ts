/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IHybridXRouterInterface extends ethers.utils.Interface {
  functions: {
    "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "buyWithEth(uint256,address,address,uint256)": FunctionFragment;
    "buyWithToken(uint256,uint256,address,address,address,uint256)": FunctionFragment;
    "getAmountIn(uint256,uint256,uint256)": FunctionFragment;
    "getAmountOut(uint256,uint256,uint256)": FunctionFragment;
    "getAmountsForBuy(uint256,uint256,address,address)": FunctionFragment;
    "getAmountsForSell(uint256,uint256,address,address)": FunctionFragment;
    "getAmountsIn(uint256,address[])": FunctionFragment;
    "getAmountsOut(uint256,address[])": FunctionFragment;
    "getBestAmountsIn(uint256,address[],uint256[])": FunctionFragment;
    "getBestAmountsOut(uint256,address[],uint256[])": FunctionFragment;
    "getOrderBook(address,address,uint32)": FunctionFragment;
    "getReserves(address,address)": FunctionFragment;
    "quote(uint256,uint256,uint256)": FunctionFragment;
    "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)": FunctionFragment;
    "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)": FunctionFragment;
    "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)": FunctionFragment;
    "sellEth(uint256,address,address,uint256)": FunctionFragment;
    "sellToken(uint256,uint256,address,address,address,uint256)": FunctionFragment;
    "swapETHForExactTokens(uint256,address[],address,uint256)": FunctionFragment;
    "swapExactETHForTokens(uint256,address[],address,uint256)": FunctionFragment;
    "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)": FunctionFragment;
    "swapExactTokensForETH(uint256,uint256,address[],address,uint256)": FunctionFragment;
    "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)": FunctionFragment;
    "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": FunctionFragment;
    "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)": FunctionFragment;
    "swapTokensForExactETH(uint256,uint256,address[],address,uint256)": FunctionFragment;
    "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityETH",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "buyWithEth",
    values: [BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyWithToken",
    values: [BigNumberish, BigNumberish, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountIn",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountOut",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsForBuy",
    values: [BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsForSell",
    values: [BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsIn",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsOut",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getBestAmountsIn",
    values: [BigNumberish, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getBestAmountsOut",
    values: [BigNumberish, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderBook",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserves",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "quote",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityETH",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityETHSupportingFeeOnTransferTokens",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityETHWithPermit",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      boolean,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      boolean,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityWithPermit",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      boolean,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sellEth",
    values: [BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellToken",
    values: [BigNumberish, BigNumberish, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapETHForExactTokens",
    values: [BigNumberish, string[], string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactETHForTokens",
    values: [BigNumberish, string[], string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactETHForTokensSupportingFeeOnTransferTokens",
    values: [BigNumberish, string[], string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForETH",
    values: [BigNumberish, BigNumberish, string[], string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForETHSupportingFeeOnTransferTokens",
    values: [BigNumberish, BigNumberish, string[], string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForTokens",
    values: [BigNumberish, BigNumberish, string[], string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForTokensSupportingFeeOnTransferTokens",
    values: [BigNumberish, BigNumberish, string[], string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForExactETH",
    values: [BigNumberish, BigNumberish, string[], string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForExactTokens",
    values: [BigNumberish, BigNumberish, string[], string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyWithEth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyWithToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsForBuy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsForSell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBestAmountsIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBestAmountsOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderBook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityETHSupportingFeeOnTransferTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityETHWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellEth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sellToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapETHForExactTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactETHForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactETHForTokensSupportingFeeOnTransferTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForETHSupportingFeeOnTransferTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForTokensSupportingFeeOnTransferTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForExactETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForExactTokens",
    data: BytesLike
  ): Result;

  events: {};
}

export class IHybridXRouter extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IHybridXRouterInterface;

  functions: {
    addLiquidity(
      tokenA: string,
      tokenB: string,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)"(
      tokenA: string,
      tokenB: string,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addLiquidityETH(
      token: string,
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)"(
      token: string,
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    buyWithEth(
      price: BigNumberish,
      tokenA: string,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "buyWithEth(uint256,address,address,uint256)"(
      price: BigNumberish,
      tokenA: string,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    buyWithToken(
      amountOffer: BigNumberish,
      price: BigNumberish,
      tokenA: string,
      tokenB: string,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "buyWithToken(uint256,uint256,address,address,address,uint256)"(
      amountOffer: BigNumberish,
      price: BigNumberish,
      tokenA: string,
      tokenB: string,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountIn: BigNumber;
      0: BigNumber;
    }>;

    "getAmountIn(uint256,uint256,uint256)"(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountIn: BigNumber;
      0: BigNumber;
    }>;

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountOut: BigNumber;
      0: BigNumber;
    }>;

    "getAmountOut(uint256,uint256,uint256)"(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountOut: BigNumber;
      0: BigNumber;
    }>;

    getAmountsForBuy(
      amountOffer: BigNumberish,
      price: BigNumberish,
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<{
      amounts: BigNumber[];
      0: BigNumber[];
    }>;

    "getAmountsForBuy(uint256,uint256,address,address)"(
      amountOffer: BigNumberish,
      price: BigNumberish,
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<{
      amounts: BigNumber[];
      0: BigNumber[];
    }>;

    getAmountsForSell(
      amountOffer: BigNumberish,
      price: BigNumberish,
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<{
      amounts: BigNumber[];
      0: BigNumber[];
    }>;

    "getAmountsForSell(uint256,uint256,address,address)"(
      amountOffer: BigNumberish,
      price: BigNumberish,
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<{
      amounts: BigNumber[];
      0: BigNumber[];
    }>;

    getAmountsIn(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<{
      amounts: BigNumber[];
      extra: BigNumber[];
      0: BigNumber[];
      1: BigNumber[];
    }>;

    "getAmountsIn(uint256,address[])"(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<{
      amounts: BigNumber[];
      extra: BigNumber[];
      0: BigNumber[];
      1: BigNumber[];
    }>;

    getAmountsOut(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<{
      amounts: BigNumber[];
      extra: BigNumber[];
      0: BigNumber[];
      1: BigNumber[];
    }>;

    "getAmountsOut(uint256,address[])"(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<{
      amounts: BigNumber[];
      extra: BigNumber[];
      0: BigNumber[];
      1: BigNumber[];
    }>;

    getBestAmountsIn(
      amountOut: BigNumberish,
      paths: string[],
      lens: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      path: string[];
      amounts: BigNumber[];
      extra: BigNumber[];
      0: string[];
      1: BigNumber[];
      2: BigNumber[];
    }>;

    "getBestAmountsIn(uint256,address[],uint256[])"(
      amountOut: BigNumberish,
      paths: string[],
      lens: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      path: string[];
      amounts: BigNumber[];
      extra: BigNumber[];
      0: string[];
      1: BigNumber[];
      2: BigNumber[];
    }>;

    getBestAmountsOut(
      amountIn: BigNumberish,
      paths: string[],
      lens: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      path: string[];
      amounts: BigNumber[];
      extra: BigNumber[];
      0: string[];
      1: BigNumber[];
      2: BigNumber[];
    }>;

    "getBestAmountsOut(uint256,address[],uint256[])"(
      amountIn: BigNumberish,
      paths: string[],
      lens: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      path: string[];
      amounts: BigNumber[];
      extra: BigNumber[];
      0: string[];
      1: BigNumber[];
      2: BigNumber[];
    }>;

    getOrderBook(
      tokenA: string,
      tokenB: string,
      limitSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      price: BigNumber;
      buyPrices: BigNumber[];
      buyAmounts: BigNumber[];
      sellPrices: BigNumber[];
      sellAmounts: BigNumber[];
      0: BigNumber;
      1: BigNumber[];
      2: BigNumber[];
      3: BigNumber[];
      4: BigNumber[];
    }>;

    "getOrderBook(address,address,uint32)"(
      tokenA: string,
      tokenB: string,
      limitSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      price: BigNumber;
      buyPrices: BigNumber[];
      buyAmounts: BigNumber[];
      sellPrices: BigNumber[];
      sellAmounts: BigNumber[];
      0: BigNumber;
      1: BigNumber[];
      2: BigNumber[];
      3: BigNumber[];
      4: BigNumber[];
    }>;

    getReserves(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<{
      reserveA: BigNumber;
      reserveB: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "getReserves(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<{
      reserveA: BigNumber;
      reserveB: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    quote(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountB: BigNumber;
      0: BigNumber;
    }>;

    "quote(uint256,uint256,uint256)"(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountB: BigNumber;
      0: BigNumber;
    }>;

    removeLiquidity(
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)"(
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeLiquidityETH(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)"(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeLiquidityETHSupportingFeeOnTransferTokens(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)"(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeLiquidityETHWithPermit(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)"(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)"(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeLiquidityWithPermit(
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)"(
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    sellEth(
      price: BigNumberish,
      tokenB: string,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "sellEth(uint256,address,address,uint256)"(
      price: BigNumberish,
      tokenB: string,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    sellToken(
      amountOffer: BigNumberish,
      price: BigNumberish,
      tokenA: string,
      tokenB: string,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "sellToken(uint256,uint256,address,address,address,uint256)"(
      amountOffer: BigNumberish,
      price: BigNumberish,
      tokenA: string,
      tokenB: string,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapETHForExactTokens(
      amountOut: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "swapETHForExactTokens(uint256,address[],address,uint256)"(
      amountOut: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    swapExactETHForTokens(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "swapExactETHForTokens(uint256,address[],address,uint256)"(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    swapExactETHForTokensSupportingFeeOnTransferTokens(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)"(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    swapExactTokensForETH(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapExactTokensForETH(uint256,uint256,address[],address,uint256)"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapExactTokensForETHSupportingFeeOnTransferTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapExactTokensForTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapExactTokensForTokensSupportingFeeOnTransferTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapTokensForExactETH(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapTokensForExactETH(uint256,uint256,address[],address,uint256)"(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapTokensForExactTokens(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)"(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addLiquidity(
    tokenA: string,
    tokenB: string,
    amountADesired: BigNumberish,
    amountBDesired: BigNumberish,
    amountAMin: BigNumberish,
    amountBMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)"(
    tokenA: string,
    tokenB: string,
    amountADesired: BigNumberish,
    amountBDesired: BigNumberish,
    amountAMin: BigNumberish,
    amountBMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addLiquidityETH(
    token: string,
    amountTokenDesired: BigNumberish,
    amountTokenMin: BigNumberish,
    amountETHMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)"(
    token: string,
    amountTokenDesired: BigNumberish,
    amountTokenMin: BigNumberish,
    amountETHMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  buyWithEth(
    price: BigNumberish,
    tokenA: string,
    to: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "buyWithEth(uint256,address,address,uint256)"(
    price: BigNumberish,
    tokenA: string,
    to: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  buyWithToken(
    amountOffer: BigNumberish,
    price: BigNumberish,
    tokenA: string,
    tokenB: string,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "buyWithToken(uint256,uint256,address,address,address,uint256)"(
    amountOffer: BigNumberish,
    price: BigNumberish,
    tokenA: string,
    tokenB: string,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getAmountIn(
    amountOut: BigNumberish,
    reserveIn: BigNumberish,
    reserveOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getAmountIn(uint256,uint256,uint256)"(
    amountOut: BigNumberish,
    reserveIn: BigNumberish,
    reserveOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmountOut(
    amountIn: BigNumberish,
    reserveIn: BigNumberish,
    reserveOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getAmountOut(uint256,uint256,uint256)"(
    amountIn: BigNumberish,
    reserveIn: BigNumberish,
    reserveOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmountsForBuy(
    amountOffer: BigNumberish,
    price: BigNumberish,
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getAmountsForBuy(uint256,uint256,address,address)"(
    amountOffer: BigNumberish,
    price: BigNumberish,
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getAmountsForSell(
    amountOffer: BigNumberish,
    price: BigNumberish,
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getAmountsForSell(uint256,uint256,address,address)"(
    amountOffer: BigNumberish,
    price: BigNumberish,
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getAmountsIn(
    amountOut: BigNumberish,
    path: string[],
    overrides?: CallOverrides
  ): Promise<{
    amounts: BigNumber[];
    extra: BigNumber[];
    0: BigNumber[];
    1: BigNumber[];
  }>;

  "getAmountsIn(uint256,address[])"(
    amountOut: BigNumberish,
    path: string[],
    overrides?: CallOverrides
  ): Promise<{
    amounts: BigNumber[];
    extra: BigNumber[];
    0: BigNumber[];
    1: BigNumber[];
  }>;

  getAmountsOut(
    amountIn: BigNumberish,
    path: string[],
    overrides?: CallOverrides
  ): Promise<{
    amounts: BigNumber[];
    extra: BigNumber[];
    0: BigNumber[];
    1: BigNumber[];
  }>;

  "getAmountsOut(uint256,address[])"(
    amountIn: BigNumberish,
    path: string[],
    overrides?: CallOverrides
  ): Promise<{
    amounts: BigNumber[];
    extra: BigNumber[];
    0: BigNumber[];
    1: BigNumber[];
  }>;

  getBestAmountsIn(
    amountOut: BigNumberish,
    paths: string[],
    lens: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<{
    path: string[];
    amounts: BigNumber[];
    extra: BigNumber[];
    0: string[];
    1: BigNumber[];
    2: BigNumber[];
  }>;

  "getBestAmountsIn(uint256,address[],uint256[])"(
    amountOut: BigNumberish,
    paths: string[],
    lens: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<{
    path: string[];
    amounts: BigNumber[];
    extra: BigNumber[];
    0: string[];
    1: BigNumber[];
    2: BigNumber[];
  }>;

  getBestAmountsOut(
    amountIn: BigNumberish,
    paths: string[],
    lens: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<{
    path: string[];
    amounts: BigNumber[];
    extra: BigNumber[];
    0: string[];
    1: BigNumber[];
    2: BigNumber[];
  }>;

  "getBestAmountsOut(uint256,address[],uint256[])"(
    amountIn: BigNumberish,
    paths: string[],
    lens: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<{
    path: string[];
    amounts: BigNumber[];
    extra: BigNumber[];
    0: string[];
    1: BigNumber[];
    2: BigNumber[];
  }>;

  getOrderBook(
    tokenA: string,
    tokenB: string,
    limitSize: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    price: BigNumber;
    buyPrices: BigNumber[];
    buyAmounts: BigNumber[];
    sellPrices: BigNumber[];
    sellAmounts: BigNumber[];
    0: BigNumber;
    1: BigNumber[];
    2: BigNumber[];
    3: BigNumber[];
    4: BigNumber[];
  }>;

  "getOrderBook(address,address,uint32)"(
    tokenA: string,
    tokenB: string,
    limitSize: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    price: BigNumber;
    buyPrices: BigNumber[];
    buyAmounts: BigNumber[];
    sellPrices: BigNumber[];
    sellAmounts: BigNumber[];
    0: BigNumber;
    1: BigNumber[];
    2: BigNumber[];
    3: BigNumber[];
    4: BigNumber[];
  }>;

  getReserves(
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<{
    reserveA: BigNumber;
    reserveB: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "getReserves(address,address)"(
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<{
    reserveA: BigNumber;
    reserveB: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  quote(
    amountA: BigNumberish,
    reserveA: BigNumberish,
    reserveB: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "quote(uint256,uint256,uint256)"(
    amountA: BigNumberish,
    reserveA: BigNumberish,
    reserveB: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  removeLiquidity(
    tokenA: string,
    tokenB: string,
    liquidity: BigNumberish,
    amountAMin: BigNumberish,
    amountBMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)"(
    tokenA: string,
    tokenB: string,
    liquidity: BigNumberish,
    amountAMin: BigNumberish,
    amountBMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeLiquidityETH(
    token: string,
    liquidity: BigNumberish,
    amountTokenMin: BigNumberish,
    amountETHMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)"(
    token: string,
    liquidity: BigNumberish,
    amountTokenMin: BigNumberish,
    amountETHMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeLiquidityETHSupportingFeeOnTransferTokens(
    token: string,
    liquidity: BigNumberish,
    amountTokenMin: BigNumberish,
    amountETHMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)"(
    token: string,
    liquidity: BigNumberish,
    amountTokenMin: BigNumberish,
    amountETHMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeLiquidityETHWithPermit(
    token: string,
    liquidity: BigNumberish,
    amountTokenMin: BigNumberish,
    amountETHMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    approveMax: boolean,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)"(
    token: string,
    liquidity: BigNumberish,
    amountTokenMin: BigNumberish,
    amountETHMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    approveMax: boolean,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
    token: string,
    liquidity: BigNumberish,
    amountTokenMin: BigNumberish,
    amountETHMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    approveMax: boolean,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)"(
    token: string,
    liquidity: BigNumberish,
    amountTokenMin: BigNumberish,
    amountETHMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    approveMax: boolean,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeLiquidityWithPermit(
    tokenA: string,
    tokenB: string,
    liquidity: BigNumberish,
    amountAMin: BigNumberish,
    amountBMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    approveMax: boolean,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)"(
    tokenA: string,
    tokenB: string,
    liquidity: BigNumberish,
    amountAMin: BigNumberish,
    amountBMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    approveMax: boolean,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  sellEth(
    price: BigNumberish,
    tokenB: string,
    to: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "sellEth(uint256,address,address,uint256)"(
    price: BigNumberish,
    tokenB: string,
    to: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  sellToken(
    amountOffer: BigNumberish,
    price: BigNumberish,
    tokenA: string,
    tokenB: string,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "sellToken(uint256,uint256,address,address,address,uint256)"(
    amountOffer: BigNumberish,
    price: BigNumberish,
    tokenA: string,
    tokenB: string,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapETHForExactTokens(
    amountOut: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "swapETHForExactTokens(uint256,address[],address,uint256)"(
    amountOut: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  swapExactETHForTokens(
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "swapExactETHForTokens(uint256,address[],address,uint256)"(
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  swapExactETHForTokensSupportingFeeOnTransferTokens(
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)"(
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  swapExactTokensForETH(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapExactTokensForETH(uint256,uint256,address[],address,uint256)"(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapExactTokensForETHSupportingFeeOnTransferTokens(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapExactTokensForTokens(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)"(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapExactTokensForTokensSupportingFeeOnTransferTokens(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapTokensForExactETH(
    amountOut: BigNumberish,
    amountInMax: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapTokensForExactETH(uint256,uint256,address[],address,uint256)"(
    amountOut: BigNumberish,
    amountInMax: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapTokensForExactTokens(
    amountOut: BigNumberish,
    amountInMax: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)"(
    amountOut: BigNumberish,
    amountInMax: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addLiquidity(
      tokenA: string,
      tokenB: string,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountA: BigNumber;
      amountB: BigNumber;
      liquidity: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)"(
      tokenA: string,
      tokenB: string,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountA: BigNumber;
      amountB: BigNumber;
      liquidity: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    addLiquidityETH(
      token: string,
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountToken: BigNumber;
      amountETH: BigNumber;
      liquidity: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)"(
      token: string,
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountToken: BigNumber;
      amountETH: BigNumber;
      liquidity: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    buyWithEth(
      price: BigNumberish,
      tokenA: string,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "buyWithEth(uint256,address,address,uint256)"(
      price: BigNumberish,
      tokenA: string,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyWithToken(
      amountOffer: BigNumberish,
      price: BigNumberish,
      tokenA: string,
      tokenB: string,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "buyWithToken(uint256,uint256,address,address,address,uint256)"(
      amountOffer: BigNumberish,
      price: BigNumberish,
      tokenA: string,
      tokenB: string,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountIn(uint256,uint256,uint256)"(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountOut(uint256,uint256,uint256)"(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsForBuy(
      amountOffer: BigNumberish,
      price: BigNumberish,
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getAmountsForBuy(uint256,uint256,address,address)"(
      amountOffer: BigNumberish,
      price: BigNumberish,
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getAmountsForSell(
      amountOffer: BigNumberish,
      price: BigNumberish,
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getAmountsForSell(uint256,uint256,address,address)"(
      amountOffer: BigNumberish,
      price: BigNumberish,
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getAmountsIn(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<{
      amounts: BigNumber[];
      extra: BigNumber[];
      0: BigNumber[];
      1: BigNumber[];
    }>;

    "getAmountsIn(uint256,address[])"(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<{
      amounts: BigNumber[];
      extra: BigNumber[];
      0: BigNumber[];
      1: BigNumber[];
    }>;

    getAmountsOut(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<{
      amounts: BigNumber[];
      extra: BigNumber[];
      0: BigNumber[];
      1: BigNumber[];
    }>;

    "getAmountsOut(uint256,address[])"(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<{
      amounts: BigNumber[];
      extra: BigNumber[];
      0: BigNumber[];
      1: BigNumber[];
    }>;

    getBestAmountsIn(
      amountOut: BigNumberish,
      paths: string[],
      lens: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      path: string[];
      amounts: BigNumber[];
      extra: BigNumber[];
      0: string[];
      1: BigNumber[];
      2: BigNumber[];
    }>;

    "getBestAmountsIn(uint256,address[],uint256[])"(
      amountOut: BigNumberish,
      paths: string[],
      lens: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      path: string[];
      amounts: BigNumber[];
      extra: BigNumber[];
      0: string[];
      1: BigNumber[];
      2: BigNumber[];
    }>;

    getBestAmountsOut(
      amountIn: BigNumberish,
      paths: string[],
      lens: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      path: string[];
      amounts: BigNumber[];
      extra: BigNumber[];
      0: string[];
      1: BigNumber[];
      2: BigNumber[];
    }>;

    "getBestAmountsOut(uint256,address[],uint256[])"(
      amountIn: BigNumberish,
      paths: string[],
      lens: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      path: string[];
      amounts: BigNumber[];
      extra: BigNumber[];
      0: string[];
      1: BigNumber[];
      2: BigNumber[];
    }>;

    getOrderBook(
      tokenA: string,
      tokenB: string,
      limitSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      price: BigNumber;
      buyPrices: BigNumber[];
      buyAmounts: BigNumber[];
      sellPrices: BigNumber[];
      sellAmounts: BigNumber[];
      0: BigNumber;
      1: BigNumber[];
      2: BigNumber[];
      3: BigNumber[];
      4: BigNumber[];
    }>;

    "getOrderBook(address,address,uint32)"(
      tokenA: string,
      tokenB: string,
      limitSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      price: BigNumber;
      buyPrices: BigNumber[];
      buyAmounts: BigNumber[];
      sellPrices: BigNumber[];
      sellAmounts: BigNumber[];
      0: BigNumber;
      1: BigNumber[];
      2: BigNumber[];
      3: BigNumber[];
      4: BigNumber[];
    }>;

    getReserves(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<{
      reserveA: BigNumber;
      reserveB: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "getReserves(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<{
      reserveA: BigNumber;
      reserveB: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    quote(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "quote(uint256,uint256,uint256)"(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidity(
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountA: BigNumber;
      amountB: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)"(
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountA: BigNumber;
      amountB: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    removeLiquidityETH(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountToken: BigNumber;
      amountETH: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)"(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountToken: BigNumber;
      amountETH: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    removeLiquidityETHSupportingFeeOnTransferTokens(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)"(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidityETHWithPermit(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amountToken: BigNumber;
      amountETH: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)"(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amountToken: BigNumber;
      amountETH: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)"(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidityWithPermit(
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amountA: BigNumber;
      amountB: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)"(
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amountA: BigNumber;
      amountB: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    sellEth(
      price: BigNumberish,
      tokenB: string,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sellEth(uint256,address,address,uint256)"(
      price: BigNumberish,
      tokenB: string,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellToken(
      amountOffer: BigNumberish,
      price: BigNumberish,
      tokenA: string,
      tokenB: string,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sellToken(uint256,uint256,address,address,address,uint256)"(
      amountOffer: BigNumberish,
      price: BigNumberish,
      tokenA: string,
      tokenB: string,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapETHForExactTokens(
      amountOut: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "swapETHForExactTokens(uint256,address[],address,uint256)"(
      amountOut: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapExactETHForTokens(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "swapExactETHForTokens(uint256,address[],address,uint256)"(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapExactETHForTokensSupportingFeeOnTransferTokens(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)"(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swapExactTokensForETH(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "swapExactTokensForETH(uint256,uint256,address[],address,uint256)"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapExactTokensForETHSupportingFeeOnTransferTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swapExactTokensForTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapExactTokensForTokensSupportingFeeOnTransferTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swapTokensForExactETH(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "swapTokensForExactETH(uint256,uint256,address[],address,uint256)"(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapTokensForExactTokens(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)"(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;
  };

  filters: {};

  estimateGas: {
    addLiquidity(
      tokenA: string,
      tokenB: string,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)"(
      tokenA: string,
      tokenB: string,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addLiquidityETH(
      token: string,
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)"(
      token: string,
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    buyWithEth(
      price: BigNumberish,
      tokenA: string,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "buyWithEth(uint256,address,address,uint256)"(
      price: BigNumberish,
      tokenA: string,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    buyWithToken(
      amountOffer: BigNumberish,
      price: BigNumberish,
      tokenA: string,
      tokenB: string,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "buyWithToken(uint256,uint256,address,address,address,uint256)"(
      amountOffer: BigNumberish,
      price: BigNumberish,
      tokenA: string,
      tokenB: string,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountIn(uint256,uint256,uint256)"(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountOut(uint256,uint256,uint256)"(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsForBuy(
      amountOffer: BigNumberish,
      price: BigNumberish,
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountsForBuy(uint256,uint256,address,address)"(
      amountOffer: BigNumberish,
      price: BigNumberish,
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsForSell(
      amountOffer: BigNumberish,
      price: BigNumberish,
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountsForSell(uint256,uint256,address,address)"(
      amountOffer: BigNumberish,
      price: BigNumberish,
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsIn(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountsIn(uint256,address[])"(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsOut(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountsOut(uint256,address[])"(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBestAmountsIn(
      amountOut: BigNumberish,
      paths: string[],
      lens: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBestAmountsIn(uint256,address[],uint256[])"(
      amountOut: BigNumberish,
      paths: string[],
      lens: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBestAmountsOut(
      amountIn: BigNumberish,
      paths: string[],
      lens: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBestAmountsOut(uint256,address[],uint256[])"(
      amountIn: BigNumberish,
      paths: string[],
      lens: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderBook(
      tokenA: string,
      tokenB: string,
      limitSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOrderBook(address,address,uint32)"(
      tokenA: string,
      tokenB: string,
      limitSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserves(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getReserves(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quote(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "quote(uint256,uint256,uint256)"(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidity(
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)"(
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeLiquidityETH(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)"(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeLiquidityETHSupportingFeeOnTransferTokens(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)"(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeLiquidityETHWithPermit(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)"(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)"(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeLiquidityWithPermit(
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)"(
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    sellEth(
      price: BigNumberish,
      tokenB: string,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "sellEth(uint256,address,address,uint256)"(
      price: BigNumberish,
      tokenB: string,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    sellToken(
      amountOffer: BigNumberish,
      price: BigNumberish,
      tokenA: string,
      tokenB: string,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "sellToken(uint256,uint256,address,address,address,uint256)"(
      amountOffer: BigNumberish,
      price: BigNumberish,
      tokenA: string,
      tokenB: string,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapETHForExactTokens(
      amountOut: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "swapETHForExactTokens(uint256,address[],address,uint256)"(
      amountOut: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    swapExactETHForTokens(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "swapExactETHForTokens(uint256,address[],address,uint256)"(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    swapExactETHForTokensSupportingFeeOnTransferTokens(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)"(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    swapExactTokensForETH(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapExactTokensForETH(uint256,uint256,address[],address,uint256)"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapExactTokensForETHSupportingFeeOnTransferTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapExactTokensForTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapExactTokensForTokensSupportingFeeOnTransferTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapTokensForExactETH(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapTokensForExactETH(uint256,uint256,address[],address,uint256)"(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapTokensForExactTokens(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)"(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      tokenA: string,
      tokenB: string,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)"(
      tokenA: string,
      tokenB: string,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addLiquidityETH(
      token: string,
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)"(
      token: string,
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    buyWithEth(
      price: BigNumberish,
      tokenA: string,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "buyWithEth(uint256,address,address,uint256)"(
      price: BigNumberish,
      tokenA: string,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    buyWithToken(
      amountOffer: BigNumberish,
      price: BigNumberish,
      tokenA: string,
      tokenB: string,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "buyWithToken(uint256,uint256,address,address,address,uint256)"(
      amountOffer: BigNumberish,
      price: BigNumberish,
      tokenA: string,
      tokenB: string,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAmountIn(uint256,uint256,uint256)"(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAmountOut(uint256,uint256,uint256)"(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountsForBuy(
      amountOffer: BigNumberish,
      price: BigNumberish,
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAmountsForBuy(uint256,uint256,address,address)"(
      amountOffer: BigNumberish,
      price: BigNumberish,
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountsForSell(
      amountOffer: BigNumberish,
      price: BigNumberish,
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAmountsForSell(uint256,uint256,address,address)"(
      amountOffer: BigNumberish,
      price: BigNumberish,
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountsIn(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAmountsIn(uint256,address[])"(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountsOut(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAmountsOut(uint256,address[])"(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBestAmountsIn(
      amountOut: BigNumberish,
      paths: string[],
      lens: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBestAmountsIn(uint256,address[],uint256[])"(
      amountOut: BigNumberish,
      paths: string[],
      lens: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBestAmountsOut(
      amountIn: BigNumberish,
      paths: string[],
      lens: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBestAmountsOut(uint256,address[],uint256[])"(
      amountIn: BigNumberish,
      paths: string[],
      lens: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrderBook(
      tokenA: string,
      tokenB: string,
      limitSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOrderBook(address,address,uint32)"(
      tokenA: string,
      tokenB: string,
      limitSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserves(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getReserves(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quote(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "quote(uint256,uint256,uint256)"(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)"(
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeLiquidityETH(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)"(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeLiquidityETHSupportingFeeOnTransferTokens(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)"(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeLiquidityETHWithPermit(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)"(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)"(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeLiquidityWithPermit(
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)"(
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    sellEth(
      price: BigNumberish,
      tokenB: string,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "sellEth(uint256,address,address,uint256)"(
      price: BigNumberish,
      tokenB: string,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    sellToken(
      amountOffer: BigNumberish,
      price: BigNumberish,
      tokenA: string,
      tokenB: string,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "sellToken(uint256,uint256,address,address,address,uint256)"(
      amountOffer: BigNumberish,
      price: BigNumberish,
      tokenA: string,
      tokenB: string,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapETHForExactTokens(
      amountOut: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "swapETHForExactTokens(uint256,address[],address,uint256)"(
      amountOut: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    swapExactETHForTokens(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "swapExactETHForTokens(uint256,address[],address,uint256)"(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    swapExactETHForTokensSupportingFeeOnTransferTokens(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)"(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    swapExactTokensForETH(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapExactTokensForETH(uint256,uint256,address[],address,uint256)"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapExactTokensForETHSupportingFeeOnTransferTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapExactTokensForTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapExactTokensForTokensSupportingFeeOnTransferTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapTokensForExactETH(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapTokensForExactETH(uint256,uint256,address[],address,uint256)"(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapTokensForExactTokens(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)"(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
